{"meta":{"generator":"0.9.0","format":20,"date":1607765267060},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"# QuickMongo\nQuick mongodb wrapper for beginners.\n\n![QuickMongo](https://nodei.co/npm/quickmongo.png)\n\n# Documentation\n**[QuickMongo](https://quickmongo.js.org)**\n\n# Features\n- Beginner friendly\n- Easy to use\n- Very similar to **[quick.db](https://npmjs.com/package/quick.db)**\n- Dot notation support\n- Import & export support\n- Key value based\n- Beginner friendly\n- Asynchronous\n- Multiple model support\n\n# Quick Example\n\n```js\nconst { Database } = require(\"quickmongo\");\nconst db = new Database(\"mongodb://localhost/quickmongo\");\n\ndb.on(\"ready\", () => {\n    console.log(\"Database connected!\");\n});\n\ndb.set(\"foo\", \"bar\");\n\ndb.get(\"foo\").then(console.log);\n```\n\n# Importing data from quick.db\n\n```js\nconst db = require(\"quick.db\");\nconst { Database } = require(\"quickmongo\");\nconst mongo = new Database(\"mongodb://localhost/quickmongo\");\n\nfunction importData() {\n    const data = db.all();\n    mongo.import(data).then(() => {\n        console.log(\"Done!\");\n    });    \n}\n\nmongo.on(\"ready\", () => importData());\n```\n\n# Links\n- **[Discord Support Server](https://discord.gg/2SUybzb)**\n- **[Documentation](https://quickmongo.js.org)**\n- **[GitHub](https://github.com/Snowflake107/quickmongo)**\n\n# Example\n\n```js\nconst { Database } = require(\"quickmongo\");\nconst db = new Database(\"mongodb://localhost/quickmongo\");\n\n// Setting an object in the database:\ndb.set(\"userInfo\", { difficulty: \"Easy\" }).then(console.log);\n// -> { difficulty: 'Easy' }\n\ndb.push(\"userInfo.items\", \"Sword\").then(console.log);\n// -> { difficulty: 'Easy', items: ['Sword'] }\n\ndb.add(\"userInfo.balance\", 500).then(console.log);\n// -> { difficulty: 'Easy', items: ['Sword'], balance: 500 }\n\n// Repeating previous examples:\ndb.push(\"userInfo.items\", \"Watch\").then(console.log);\n// -> { difficulty: 'Easy', items: ['Sword', 'Watch'], balance: 500 }\n\ndb.add(\"userInfo.balance\", 500).then(console.log);\n// -> { difficulty: 'Easy', items: ['Sword', 'Watch'], balance: 1000 }\n\n// Fetching individual properties\ndb.get(\"userInfo.balance\").then(console.log);\n// -> 1000\ndb.get(\"userInfo.items\").then(console.log);\n// -> ['Sword', 'Watch']\n```","path":"docs/general/welcome.md"}}}},"classes":[{"name":"Base","construct":{"name":"Base","description":"Instantiates the base database.\nThis class is implemented by the main Database class.","params":[{"name":"mongodbURL","description":"Mongodb Database URL.","type":[[["string"]]]},{"name":"connectionOptions","description":"Mongodb connection options","type":[[["object"]]]}]},"props":[{"name":"options","description":"Mongoose connection options","type":[[["ConnectionOptions"]]],"meta":{"line":32,"file":"Base.js","path":"src"}},{"name":"readyAt","description":"Timestamp when database became ready","type":[[["Date"]]],"meta":{"line":44,"file":"Base.js","path":"src"}},{"name":"connection","description":"Returns mongodb connection","type":[[["MongooseConnection"]]],"meta":{"line":86,"file":"Base.js","path":"src"}},{"name":"url","description":"Current database url","type":[[["string"]]],"meta":{"line":94,"file":"Base.js","path":"src"}},{"name":"state","description":"Returns database connection state","type":[[["DISCONNECTED","\""]],[["CONNECTED","\""]],[["CONNECTING","\""]],[["DISCONNECTING","\""]]],"meta":{"line":102,"file":"Base.js","path":"src"}}],"methods":[{"name":"_create","description":"Creates mongodb connection","meta":{"line":53,"file":"Base.js","path":"src"}},{"name":"_destroyDatabase","description":"Destroys database","meta":{"line":75,"file":"Base.js","path":"src"}}],"events":[{"name":"ready","description":"Emitted when database creates connection","meta":{"line":116,"file":"Base.js","path":"src"}},{"name":"error","description":"Emitted when database encounters error","params":[{"name":"Error","description":"Error Message","type":[[["Error"]]]}],"meta":{"line":124,"file":"Base.js","path":"src"}},{"name":"debug","description":"Emitted on debug mode","params":[{"name":"Message","description":"Debug message","type":[[["string"]]]}],"meta":{"line":131,"file":"Base.js","path":"src"}}],"meta":{"line":14,"file":"Base.js","path":"src"}},{"name":"Database","description":"Quick mongodb wrapper","construct":{"name":"Database","description":"Creates quickmongo instance","params":[{"name":"mongodbURL","description":"Mongodb database url","type":[[["string"]]]},{"name":"name","description":"Model name","type":[[["string"]]]},{"name":"connectionOptions","description":"Mongoose connection options","type":[[["object"]]]}]},"props":[{"name":"schema","description":"Current Model","type":[[["MongooseDocument"]]],"meta":{"line":27,"file":"Main.js","path":"src"}},{"name":"uptime","description":"Returns database uptime","type":[[["number"]]],"meta":{"line":297,"file":"Main.js","path":"src"}},{"name":"name","description":"Returns current model name","readonly":true,"type":[[["string"]]],"meta":{"line":394,"file":"Main.js","path":"src"}},{"name":"utils","description":"Returns **QuickMongo Util**","type":[[["Util"]]],"meta":{"line":624,"file":"Main.js","path":"src"}}],"methods":[{"name":"set","description":"Sets the value to the database","examples":["db.set(\"foo\", \"bar\").then(() => console.log(\"Saved data\"));"],"params":[{"name":"key","description":"Key","type":[[["string"]]]},{"name":"value","description":"Data","type":[[["any"]]]}],"async":true,"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":37,"file":"Main.js","path":"src"}},{"name":"delete","description":"Deletes a data from the database","examples":["db.delete(\"foo\").then(() => console.log(\"Deleted data\"));"],"params":[{"name":"key","description":"Key","type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":70,"file":"Main.js","path":"src"}},{"name":"exists","description":"Checks if there is a data stored with the given key","examples":["db.exists(\"foo\").then(console.log);"],"params":[{"name":"key","description":"Key","type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":96,"file":"Main.js","path":"src"}},{"name":"has","description":"Checks if there is a data stored with the given key","examples":["db.has(\"foo\").then(console.log);"],"params":[{"name":"key","description":"Key","type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":117,"file":"Main.js","path":"src"}},{"name":"get","description":"Fetches the data from database","examples":["db.get(\"foo\").then(console.log);"],"params":[{"name":"key","description":"Key","type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":127,"file":"Main.js","path":"src"}},{"name":"fetch","description":"Fetches the data from database","examples":["db.fetch(\"foo\").then(console.log);"],"params":[{"name":"key","description":"Key","type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":148,"file":"Main.js","path":"src"}},{"name":"all","description":"Returns everything from the database","examples":["let data = await db.all();","console.log(`There are total ${data.length} entries.`);"],"params":[{"name":"limit","description":"Data limit","default":0,"type":[[["number"]]]}],"async":true,"returns":[[["Promise","<"],["Array","<"],["Data",">>"]]],"meta":{"line":165,"file":"Main.js","path":"src"}},{"name":"fetchAll","description":"Returns everything from the database","examples":["let data = await db.all();\nconsole.log(`There are total ${data.length} entries.`);"],"params":[{"name":"limit","description":"Data limit","type":[[["number"]]]}],"async":true,"returns":[[["Promise","<"],["Array","<"],["Data",">>"]]],"meta":{"line":183,"file":"Main.js","path":"src"}},{"name":"deleteAll","description":"Deletes the entire model","examples":["db.deleteAll().then(() => console.log(\"Deleted everything\"));"],"async":true,"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":192,"file":"Main.js","path":"src"}},{"name":"math","description":"Math calculation","examples":["db.math(\"items\", \"+\", 200).then(() => console.log(\"Added 200 items\"));"],"params":[{"name":"key","description":"Key of the data","type":[[["string"]]]},{"name":"operator","description":"One of +, -, *, / or %","type":[[["string"]]]},{"name":"value","description":"Value","type":[[["number"]]]}],"async":true,"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":206,"file":"Main.js","path":"src"}},{"name":"add","description":"Add","examples":["db.add(\"items\", 200).then(() => console.log(\"Added 200 items\"));"],"params":[{"name":"key","description":"key","type":[[["string"]]]},{"name":"value","description":"value","type":[[["number"]]]}],"async":true,"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":277,"file":"Main.js","path":"src"}},{"name":"subtract","description":"Subtract","examples":["db.subtract(\"items\", 100).then(() => console.log(\"Removed 100 items\"));"],"params":[{"name":"key","description":"Key","type":[[["string"]]]},{"name":"value","description":"Value","type":[[["number"]]]}],"async":true,"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":288,"file":"Main.js","path":"src"}},{"name":"export","description":"Exports the data to json file","examples":["db.export(\"database.json\", \"./\").then(path => {\n    console.log(`File exported to ${path}`);\n});"],"params":[{"name":"fileName","description":"File name.","default":"database","type":[[["string"]]]},{"name":"path","description":"File path","default":"./","type":[[["string"]]]}],"returns":[[["Promise","<"],["string",">"]]],"meta":{"line":312,"file":"Main.js","path":"src"}},{"name":"import","description":"<warn>You should set `useUnique` to `true` in order to avoid duplicate documents.</warn>\n\nImports data from other source to quickmongo. \n\nData type should be Array containing `ID` and `data` fields.\nExample: \n```js\n[{ ID: \"foo\", data: \"bar\" }, { ID: \"hi\", data: \"hello\" }]\n```","examples":["const data = QuickDB.all(); // imports data from quick.db to quickmongo\nQuickMongo.import(data);"],"params":[{"name":"data","description":"Array of data","type":[[["Array"]]]},{"name":"ops","description":"Import options","type":[[["object"]]]},{"name":"ops.validate","description":"If set to true, it will insert valid documents only","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"ops.unique","description":"If it should import unique data only (slow)","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":345,"file":"Main.js","path":"src"}},{"name":"disconnect","description":"Disconnects the database","examples":["db.disconnect();"],"returns":[[["void"]]],"meta":{"line":372,"file":"Main.js","path":"src"}},{"name":"connect","description":"Creates database connection.\n\nYou don't need to call this method because it is automatically called by database manager.","params":[{"name":"url","description":"Database url","type":[[["string"]]]}],"returns":[[["void"]]],"meta":{"line":385,"file":"Main.js","path":"src"}},{"name":"_read","description":"Read latency","access":"private","async":true,"returns":[[["Promise","<"],["number",">"]]],"meta":{"line":404,"file":"Main.js","path":"src"}},{"name":"_write","description":"Write latency","access":"private","async":true,"returns":[[["Promise","<"],["number",">"]]],"meta":{"line":416,"file":"Main.js","path":"src"}},{"name":"fetchLatency","description":"Fetches read and write latency of the database in ms","examples":["const ping = await db.fetchLatency();\nconsole.log(\"Read: \", ping.read);\nconsole.log(\"Write: \", ping.write);\nconsole.log(\"Average: \", ping.average);"],"async":true,"returns":[[["Promise","<"],["DatabaseLatency",">"]]],"meta":{"line":437,"file":"Main.js","path":"src"}},{"name":"ping","description":"Fetches read and write latency of the database in ms","examples":["const ping = await db.ping();\nconsole.log(\"Read: \", ping.read);\nconsole.log(\"Write: \", ping.write);\nconsole.log(\"Average: \", ping.average);"],"async":true,"returns":[[["Promise","<"],["DatabaseLatency",">"]]],"meta":{"line":453,"file":"Main.js","path":"src"}},{"name":"startsWith","description":"Fetches everything and sorts by given target","examples":["const data = await db.startsWith(\"money\", { sort: \".data\", limit: 10 });"],"params":[{"name":"key","description":"Key","type":[[["string"]]]},{"name":"ops","description":"Options","type":[[["object"]]]}],"async":true,"returns":[[["Promise","<"],["Array","<"],["Data",">>"]]],"meta":{"line":464,"file":"Main.js","path":"src"}},{"name":"type","description":"Resolves data type","examples":["console.log(await db.type(\"foo\"));"],"params":[{"name":"key","description":"key","type":[[["string"]]]}],"async":true,"returns":[[["Promise","<(\""],["string","\"|\""],["number","\"|\""],["bigint","\"|\""],["boolean","\"|\""],["symbol","\"|\""],["undefined","\"|\""],["object","\"|\""],["function","\"|\""],["array","\")>"]]],"meta":{"line":476,"file":"Main.js","path":"src"}},{"name":"keyArray","description":"Returns array of the keys","examples":["const keys = await db.keyarray();\nconsole.log(keys);"],"async":true,"returns":[[["Promise","<"],["Array","<"],["string",">>"]]],"meta":{"line":489,"file":"Main.js","path":"src"}},{"name":"valueArray","description":"Returns array of the values","examples":["const data = await db.valueArray();\nconsole.log(data);"],"async":true,"returns":[[["Promise","<"],["Array","<"],["any",">>"]]],"meta":{"line":500,"file":"Main.js","path":"src"}},{"name":"push","description":"Pushes an item into array","examples":["db.push(\"users\", \"John\"); // -> [\"John\"]\ndb.push(\"users\", [\"Milo\", \"Simon\", \"Kyle\"]); // -> [\"John\", \"Milo\", \"Simon\", \"Kyle\"]"],"params":[{"name":"key","description":"key","type":[[["string"]]]},{"name":"value","description":"Value to push","type":[[["any"]],[["Array","<"],["any",">"]]]}],"async":true,"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":513,"file":"Main.js","path":"src"}},{"name":"pull","description":"Removes an item from array","examples":["db.pull(\"users\", \"John\"); // -> [\"Milo\", \"Simon\", \"Kyle\"]\ndb.pull(\"users\", [\"Milo\", \"Simon\"]); // -> [\"Kyle\"]"],"params":[{"name":"key","description":"key","type":[[["string"]]]},{"name":"value","description":"item to remove","type":[[["any"]],[["Array","<"],["any",">"]]]},{"name":"multiple","description":"if it should pull multiple items. Defaults to `true`.\n<warn>Currently, you can use `multiple` with `non array` pulls only.</warn>","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":535,"file":"Main.js","path":"src"}},{"name":"entries","description":"Returns entries count of current model","examples":["const entries = await db.entries();\nconsole.log(`There are total ${entries} entries!`);"],"async":true,"returns":[[["Promise","<"],["number",">"]]],"meta":{"line":562,"file":"Main.js","path":"src"}},{"name":"raw","description":"Returns raw data from current model","examples":["const raw = await db.raw();\nconsole.log(raw);"],"params":[{"name":"params","description":"Search params","type":[[["object"]]]}],"async":true,"returns":[[["Promise","<"],["MongooseDocument",">"]]],"meta":{"line":573,"file":"Main.js","path":"src"}},{"name":"random","description":"Returns random entry from the database","examples":["const random = await db.random();\nconsole.log(random);"],"params":[{"name":"n","description":"Number entries to return","default":1,"type":[[["number"]]]}],"async":true,"returns":[[["Promise","<"],["Array","<"],["any",">>"]]],"meta":{"line":584,"file":"Main.js","path":"src"}},{"name":"createModel","description":"This method acts like `quick.db#table`. It will return new instance of itself.","params":[{"name":"name","description":"Model name","type":[[["string"]]]}],"returns":[[["Database"]]],"meta":{"line":597,"file":"Main.js","path":"src"}},{"name":"exportToQuickDB","description":"This method exports **QuickMongo** data to **Quick.db**","examples":["const data = await db.exportToQuickDB(quickdb);"],"params":[{"name":"quickdb","description":"Quick.db instance","type":[[["any"]]]}],"async":true,"returns":[[["Promise","<"],["Array","<"],["any",">>"]]],"meta":{"line":609,"file":"Main.js","path":"src"}},{"name":"updateModel","description":"Updates current model and uses new one","params":[{"name":"name","description":"model name to use","type":[[["string"]]]}],"returns":[[["MongooseDocument"]]],"meta":{"line":633,"file":"Main.js","path":"src"}},{"name":"toString","description":"String representation of the database","examples":["console.log(db.toString());"],"returns":[[["string"]]],"meta":{"line":643,"file":"Main.js","path":"src"}},{"name":"_eval","description":"Allows you to eval code using `this` keyword.","examples":["db._eval(\"this.all().then(console.log)\"); // -> [{ ID: \"...\", data: ... }, ...]"],"params":[{"name":"code","description":"code to eval","type":[[["string"]]]}],"returns":[[["any"]]],"meta":{"line":654,"file":"Main.js","path":"src"}}],"meta":{"line":10,"file":"Main.js","path":"src"}},{"name":"Util","construct":{"name":"Util","description":"**You _cannot instantiate_ Util class. Every methods of this class are `static` methods.**"},"methods":[{"name":"isKey","description":"Returns true if provided key is valid","scope":"static","params":[{"name":"str","description":"Anything to test","type":[[["any"]]]}],"returns":[[["boolean"]]],"meta":{"line":18,"file":"Util.js","path":"src"}},{"name":"isValue","description":"Returns true if the given data is valid","scope":"static","params":[{"name":"data","description":"Any data","type":[[["any"]]]}],"returns":[[["boolean"]]],"meta":{"line":27,"file":"Util.js","path":"src"}},{"name":"parseKey","description":"Returns target & key from the given string (quickdb style)","scope":"static","examples":["Util.parseKey(\"myitem.items\");\n// -> { key: \"myitems\", target: \"items\" }"],"params":[{"name":"key","description":"key to parse","type":[[["string"]]]}],"returns":[[["KEY"]]],"meta":{"line":46,"file":"Util.js","path":"src"}},{"name":"sort","description":"Sort data","scope":"static","examples":["Util.sort(\"user_\", {...}, { sort: \".data\" });"],"params":[{"name":"key","description":"Key","type":[[["string"]]]},{"name":"data","description":"Data","type":[[["Array"]]]},{"name":"ops","description":"options","type":[[["object"]]]}],"returns":[[["Array","<"],["any",">"]]],"meta":{"line":65,"file":"Util.js","path":"src"}},{"name":"setData","description":"Data resolver","scope":"static","examples":["Util.setData(\"user.items\", {...}, [\"pen\"]);"],"params":[{"name":"key","description":"Data key","type":[[["string"]]]},{"name":"data","description":"Data","type":[[["any"]]]},{"name":"value","description":"value","type":[[["any"]]]}],"returns":[[["any"]]],"meta":{"line":84,"file":"Util.js","path":"src"}},{"name":"unsetData","description":"Data resolver","scope":"static","examples":["Util.unsetData(\"user.items\", {...});"],"params":[{"name":"key","description":"Data key","type":[[["string"]]]},{"name":"data","description":"Data","type":[[["any"]]]},{"name":"value","description":"value","type":[[["any"]]]}],"returns":[[["any"]]],"meta":{"line":100,"file":"Util.js","path":"src"}},{"name":"getData","description":"Data resolver","scope":"static","examples":["Util.getData(\"user.items\", {...});"],"params":[{"name":"key","description":"Key","type":[[["string"]]]},{"name":"data","description":"Data","type":[[["any"]]]}],"returns":[[["any"]]],"meta":{"line":116,"file":"Util.js","path":"src"}}],"meta":{"line":9,"file":"Util.js","path":"src"}}],"interfaces":[],"typedefs":[{"name":"Data","type":[[["object"]]],"props":[{"name":"ID","description":"Data id","type":[[["string"]]]},{"name":"data","description":"Data","type":[[["any"]]]}],"meta":{"line":152,"file":"Main.js","path":"src"}},{"name":"DatabaseLatency","type":[[["object"]]],"props":[{"name":"read","description":"Read latency","type":[[["number"]]]},{"name":"write","description":"Write latency","type":[[["number"]]]},{"name":"average","description":"Average latency","type":[[["number"]]]}],"meta":{"line":422,"file":"Main.js","path":"src"}},{"name":"KEY","type":[[["object"]]],"props":[{"name":"key","description":"Parsed Key","type":[[["string"]],[["undefined"]]]},{"name":"target","description":"Parsed target","type":[[["string"]],[["undefined"]]]}],"meta":{"line":33,"file":"Util.js","path":"src"}}],"externals":[]}
